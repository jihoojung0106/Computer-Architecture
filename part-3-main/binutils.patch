diff --git a/include/opcode/riscv-opc.h b/include/opcode/riscv-opc.h
index 85d35c1efc9..ac5bdfac48f 100644
--- a/include/opcode/riscv-opc.h
+++ b/include/opcode/riscv-opc.h
@@ -2342,6 +2342,30 @@
 #define MASK_TH_SYNC_IS 0xffffffff
 #define MATCH_TH_SYNC_S 0x0190000b
 #define MASK_TH_SYNC_S 0xffffffff
+
+
+#define MATCH_SVUNPACK 0x0000000b
+#define MASK_SVUNPACK  0xfff0707f
+#define MATCH_SVPACK   0x0000100b
+#define MASK_SVPACK    0xfe00707f
+#define MATCH_SVBRDCST 0x0000200b
+#define MASK_SVBRDCST  0xfff0707f
+
+#define MATCH_SVADDI 0x0000300b
+#define MASK_SVADDI  0x0000707f
+
+#define MATCH_SVADD 0x0000400b
+#define MASK_SVADD  0xfe00707f
+
+#define MATCH_SVSUB 0x0000500b
+#define MASK_SVSUB  0xfe00707f
+
+#define MATCH_SVMUL 0x0000600b
+#define MASK_SVMUL  0xfe00707f
+
+
+
+
 /* Unprivileged Counter/Timers CSR addresses.  */
 #define CSR_CYCLE 0xc00
 #define CSR_TIME 0xc01
diff --git a/opcodes/riscv-opc.c b/opcodes/riscv-opc.c
index f67375f10a9..35df20c5db8 100644
--- a/opcodes/riscv-opc.c
+++ b/opcodes/riscv-opc.c
@@ -512,6 +512,15 @@ const struct riscv_opcode riscv_opcodes[] =
 {"sraiw",      64, INSN_CLASS_I, "d,s,<",     MATCH_SRAIW, MASK_SRAIW, match_opcode, 0 },
 {"subw",       64, INSN_CLASS_C, "Cs,Cw,Ct",  MATCH_C_SUBW, MASK_C_SUBW, match_opcode, INSN_ALIAS },
 {"subw",       64, INSN_CLASS_I, "d,s,t",     MATCH_SUBW, MASK_SUBW, match_opcode, 0 },
+{"svunpack",    0, INSN_CLASS_I,     "d,s",       MATCH_SVUNPACK, MASK_SVUNPACK, match_opcode, 0 },
+{"svpack",      0, INSN_CLASS_I,     "d,s,t",     MATCH_SVPACK, MASK_SVPACK, match_opcode, 0 },
+
+{"svbrdcst",    0, INSN_CLASS_I,     "d,s",       MATCH_SVBRDCST, MASK_SVBRDCST, match_opcode, 0 },
+{"svaddi",      0, INSN_CLASS_I,     "d,s,j",     MATCH_SVADDI, MASK_SVADDI, match_opcode, 0 },
+{"svadd",    0, INSN_CLASS_I,     "d,s,t",       MATCH_SVADD, MASK_SVADD, match_opcode, 0 },
+{"svsub",      0, INSN_CLASS_I,     "d,s,t",     MATCH_SVSUB, MASK_SVSUB, match_opcode, 0 },
+{"svmul",      0, INSN_CLASS_M,     "d,s,t",     MATCH_SVMUL, MASK_SVMUL, match_opcode, 0 },
+
 
 /* Atomic memory operation instruction subset.  */
 {"lr.w",            0, INSN_CLASS_A, "d,0(s)",   MATCH_LR_W, MASK_LR_W|MASK_AQRL, match_opcode, INSN_DREF|INSN_4_BYTE },
